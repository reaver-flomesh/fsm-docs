kind: Plugin
apiVersion: plugin.flomesh.io/v1alpha1
metadata:
  name: traffic-mirror
spec:
  priority: 115
  pipyscript: |+
    ((
      config = pipy.solve('config.js'),
      clusterCache = new algo.Cache(
        (clusterName => (
          (cluster = config?.Outbound?.ClustersConfigs?.[clusterName]) => (
            cluster ? Object.assign({ name: clusterName }, cluster) : null
          )
        )())
      ),
      hexChar = { '0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'a': 10, 'b': 11, 'c': 12, 'd': 13, 'e': 14, 'f': 15 },
      randomInt63 = () => (
        algo.uuid().substring(0, 18).replaceAll('-', '').split('').reduce((calc, char) => (calc * 16) + hexChar[char], 0) / 2
      ),
      samplingRange = fraction => (fraction > 0 ? fraction : 0) * Math.pow(2, 63),
      configCache = new algo.Cache(
        pluginConfig => pluginConfig && (
          {
            samplingRange: pluginConfig?.percentage?.value > 0 ? samplingRange(pluginConfig.percentage.value) : 0,
            clusterName: pluginConfig?.namespace + '/' + pluginConfig?.service + '|' + pluginConfig?.port,
            namespace: pluginConfig?.namespace,
            service: pluginConfig?.service,
            port: pluginConfig?.port,
          }
        )
      ),
    ) => pipy({
      _pluginName: '',
      _pluginConfig: null,
      _mirrorConfig: null,
      _randomVal: 0,
      _mirrorCluster: undefined,
    })
    .import({
      __service: 'outbound-http-routing',
      __cluster: 'outbound-http-routing',
    })
    .pipeline()
    .onStart(
      () => void (
        _pluginName = __filename.slice(9, -3),
        _pluginConfig = __service?.Plugins?.[_pluginName],
        (_mirrorConfig = configCache.get(_pluginConfig)) && (
          _mirrorCluster = clusterCache.get(_mirrorConfig.clusterName)
        )
      )
    )
    .handleMessageStart(
      () => (
        _mirrorCluster && (
          _randomVal = randomInt63(),
          (_randomVal < _mirrorConfig.samplingRange) || (
            _mirrorCluster = undefined
          )
        )
      )
    )
    .branch(
      () => _mirrorCluster, (
        $=>$
        .fork([1]).to('mirror-cluster')
        .chain()
      ), (
        $=>$.chain()
      )
    )
    
    .pipeline('mirror-cluster')
    .replaceMessage(
      msg => (
        (
          mirrorMsg = new Message(Object.assign({}, msg.head), msg.body),
          hostParts = msg.head.headers.host.split('.'),
        ) => (
          __cluster = _mirrorCluster,
          hostParts?.length > 0 && (
            hostParts[0] = _mirrorConfig.service,
            mirrorMsg.head.headers = Object.assign({}, msg.head.headers),
            mirrorMsg.head.headers.host = hostParts.join('.')
          ),
          mirrorMsg
        )
      )()
    )
    .chain([
      'modules/outbound-http-load-balancing.js',
      'modules/outbound-http-default.js',
    ])
    .dummy()
    )()
